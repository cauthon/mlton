* google hangout <2013-06-11 Tue>
  -bracket intresting stuff with ffi calls to find them in intermediate files
  -functon order can get reversed in different passes
  -names are not mangled too much in intermediate code
  -implement 2 vector types words and reals with a parameter of number elements and a parametr of element size
  -look at codegen prim predicate, that checks if an opperation is
  supported
* google hangout <2013-06-14 Fri>
-asserts in mlton/lib/basic, use for testing
-functor calls get expanded, so try to share code explictly
-handle generic code
-datatype of vectorop
* google hangout <2013-06-18 Tue>
  -alignment question
  -Vector primitive needs to be written
  -I need to do this myself (woo?)
    -Atoms.prims is first place to look
    -then look at places its used
    -then goto basis lib primitives and instantiate it there
    -Array0Const is a good place to look for an 
  -MLton has an unsafe array to vector conversion
  -Compairsons both bool and actual int/float values

  -Functors for type paramiterization is a good idea, just be sure to
  share the code that does the backend work
* google hangout <2013-06-21 Fri>
  -Might be some predefined objects aligned to 8 byte boundries
  -Also look at the runtime stuff, thats probably the issue
  -basis lib unsafe.mlb to create uninitalized array
  -compare c calls to c calls, i.e. c-simd call vs c-for loop

* google hangout <2013-07-03 Wed>
  -want something like word128 ! ! !
  -this is important for performance.
  -tuples are tricky.
  -pack word should work ok.
  -enumerate the specific subset of instructions for frontend.
  -start working from backend and moving up for implementing hardware stuff.
  -work with the simple ir's, basically ssa, working with primitive not object.
  -start with ssa and work down and up from there.
  -look at word based things in ssa.
* google hangout <2013-07-10 Wed>
  QUESTIONS: adding Ymm register stuff to amd64 codegen
  -alias the ymm registers to the xmm registers
  -keep just xmm register structure and work on that
* google hangout <2013-07-12 Fri>
  -primitives, start at prim.sig/fun & ast is where typedefs are
  -ssa is where to start recoginizing the fact that my type is a primitive
  -simd_wordx & simd_realx are ok names
  -ast/ is where types are defined
  -put explict cast primitive for ints of different sizes
  -make debug compiles with exception trace histories
  -smlnj speeds up compilations

* google hangout <2013-07-16 Tue>
  -runtime stuff, look at real-opts.h and word-opts.h and write simd
  versions of that
  -in prim-tycons i need to add vals simdReal and simdReals so than I can
  fix hash-type.fun
  -Also might want to look at type-opts,atoms and ast-atoms.sig/fun 

* google hangout <2013-07-19 Fri>
  -probably easiest to use 6 distint c-types
  -Its ok to use the distinct types
  -pass simd types not pointers
  -look at machine il for adding simd types for c-codegen
  -"registers" in machine il are just c-types
  -MLTON_CODEGEN_STATIC_INLINE is literally static inline
* google hangout <2013-07-23 Tue>
  -Ask about layout, how to deal with opcode suffixes etc
  -Ask about a way to make sml Arrays behave like c pointers
  -REALLY need to ask above, I kinda really need pointer arathmatic
     or something similar
  -packReal and packWord, use a primitive Word8Array type thing
  -Add a Word8Array_subSimd primitive
  -add primitive stuff to the basis library(make basis-library/simd &
      add a file primitives/simd-prim.sml
Word8_subSIMD of SimdRealSize.t
val Word8_subSIMD_f32v4 : Word8.word array * ArraySeqInt.t -> f32v4
_import "Real64Array_subSIMD" : Real64.real array * int -> v4f64
* google hangout <2013-07-29 Mon>
  -stuck on elaborate, actually a problem with the basis libary
  -where else do I need to add module/structure/etc.. information
  -go to basis libary
* google hangout <2013-08-09 Fri>
  handleMisaligned in c-codegen is a place to look for making sure
  gcc keeps things aligned.
  Also need to keep in mind stack alignment
  Stack alignment might be weird
  simd constants should be a struct of size and a vector of values


* google hangout <2013-08-13 Tue>
 -add to amd64-generate-trasfers and amd64-entry*
 to allow native codgen with c functions
 also return false for isPrimApp in amd64-mlton.fun

 -Timer structure in basis should be fine for timing

* google hangout <2013-08-20 Tue>
  
* google hangout <2013-08-30 Fri>
  crypto stuff & matrix multiply
  documentation ala the mlton structure on the website
* Low level details
** Immediate opperands
*** Compairson
#+BEGIN_SRC C
/* Compare predicates for scalar and packed compare intrinsics. In AVX */

/* Equal (ordered, non-signaling)  */
#define _CMP_EQ_OQ	0x00
/* Less-than (ordered, signaling)  */
#define _CMP_LT_OS	0x01
/* Less-than-or-equal (ordered, signaling)  */
#define _CMP_LE_OS	0x02
/* Unordered (non-signaling)  */
#define _CMP_UNORD_Q	0x03
/* Not-equal (unordered, non-signaling)  */
#define _CMP_NEQ_UQ	0x04
/* Not-less-than (unordered, signaling)  */
#define _CMP_NLT_US	0x05
/* Not-less-than-or-equal (unordered, signaling)  */
#define _CMP_NLE_US	0x06
/* Ordered (nonsignaling)   */
#define _CMP_ORD_Q	0x07
/* Equal (unordered, non-signaling)  */
#define _CMP_EQ_UQ	0x08
/* Not-greater-than-or-equal (unordered, signaling)  */
#define _CMP_NGE_US	0x09
/* Not-greater-than (unordered, signaling)  */
#define _CMP_NGT_US	0x0a
/* False (ordered, non-signaling)  */
#define _CMP_FALSE_OQ	0x0b
/* Not-equal (ordered, non-signaling)  */
#define _CMP_NEQ_OQ	0x0c
/* Greater-than-or-equal (ordered, signaling)  */
#define _CMP_GE_OS	0x0d
/* Greater-than (ordered, signaling)  */
#define _CMP_GT_OS	0x0e
/* True (unordered, non-signaling)  */
#define _CMP_TRUE_UQ	0x0f
/* Equal (ordered, signaling)  */
#define _CMP_EQ_OS	0x10
/* Less-than (ordered, non-signaling)  */
#define _CMP_LT_OQ	0x11
/* Less-than-or-equal (ordered, non-signaling)  */
#define _CMP_LE_OQ	0x12
/* Unordered (signaling)  */
#define _CMP_UNORD_S	0x13
/* Not-equal (unordered, signaling)  */
#define _CMP_NEQ_US	0x14
/* Not-less-than (unordered, non-signaling)  */
#define _CMP_NLT_UQ	0x15
/* Not-less-than-or-equal (unordered, non-signaling)  */
#define _CMP_NLE_UQ	0x16
/* Ordered (signaling)  */
#define _CMP_ORD_S	0x17
/* Equal (unordered, signaling)  */
#define _CMP_EQ_US	0x18
/* Not-greater-than-or-equal (unordered, non-signaling)  */
#define _CMP_NGE_UQ	0x19
/* Not-greater-than (unordered, non-signaling)  */
#define _CMP_NGT_UQ	0x1a
/* False (ordered, signaling)  */
#define _CMP_FALSE_OS	0x1b
/* Not-equal (ordered, signaling)  */
#define _CMP_NEQ_OS	0x1c
/* Greater-than-or-equal (ordered, non-signaling)  */
#define _CMP_GE_OQ	0x1d
/* Greater-than (ordered, non-signaling)  */
#define _CMP_GT_OQ	0x1e
/* True (unordered, signaling)  */
#define _CMP_TRUE_US	0x1f
#+END_SRC
*** Compairson table
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | 1             | on                        | QNAN                      |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered       |                |       |          |       |       |     |         |         |     |
| EQ_OQ           | (EQ)          | 0H                        | Equal                     | (ordered,       | non-signaling) | False | False    | True  | False | No  |         |         |     |
| LT_OS           | (LT)          | 1H                        | Less-than                 | (ordered,       | signaling)     | False | True     | False | False | Yes |         |         |     |
| LE_OS           | (LE)          | 2H                        | Less-than-or-equal        | (ordered,       | False          | True  | True     | False | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_Q         | 3H            | Unordered                 | (non-signaling)           | False           | False          | False | True     | No    |       |     |         |         |     |
| (UNORD)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NEQ_UQ          | (NEQ)         | 4H                        | Not-equal                 | (unordered,     | non-           | True  | True     | False | True  | No  |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLT_US          | (NLT)         | 5H                        | Not-less-than             | (unordered,     | signaling)     | True  | False    | True  | True  | Yes |         |         |     |
| NLE_US          | (NLE)         | 6H                        | Not-less-than-or-equal    | (unordered,     | True           | False | False    | True  | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_Q           | (ORD)         | 7H                        | Ordered                   | (non-signaling) | True           | True  | True     | False | No    |     |         |         |     |
| EQ_UQ           | 8H            | Equal                     | (unordered,               | non-signaling)  | False          | False | True     | True  | No    |     |         |         |     |
| NGE_US          | (NGE)         | 9H                        | Not-greater-than-or-equal | False           | True           | False | True     | Yes   |       |     |         |         |     |
| (unordered,     | signaling)    |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_US          | (NGT)         | AH                        | Not-greater-than          | (unordered,     | sig-           | False | True     | True  | True  | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OQ(FALSE) | BH            | False                     | (ordered,                 | non-signaling)  | False          | False | False    | False | No    |     |         |         |     |
| NEQ_OQ          | CH            | Not-equal                 | (ordered,                 | non-signaling)  | True           | True  | False    | False | No    |     |         |         |     |
| GE_OS           | (GE)          | DH                        | Greater-than-or-equal     | (ordered,       | sig-           | True  | False    | True  | False | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OS           | (GT)          | EH                        | Greater-than              | (ordered,       | signaling)     | True  | False    | False | False | Yes |         |         |     |
| TRUE_UQ(TRUE)   | FH            | True                      | (unordered,               | non-signaling)  | True           | True  | True     | True  | No    |     |         |         |     |
| EQ_OS           | 10H           | Equal                     | (ordered,                 | signaling)      | False          | False | True     | False | Yes   |     |         |         |     |
| LT_OQ           | 11H           | Less-than                 | (ordered,                 | nonsignaling)   | False          | True  | False    | False | No    |     |         |         |     |
| LE_OQ           | 12H           | Less-than-or-equal        | (ordered,                 | non-            | False          | True  | True     | False | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_S         | 13H           | Unordered                 | (signaling)               | False           | False          | False | True     | Yes   |       |     |         |         |     |
| NEQ_US          | 14H           | Not-equal                 | (unordered,               | signaling)      | True           | True  | False    | True  | Yes   |     |         |         |     |
| NLT_UQ          | 15H           | Not-less-than             | (unordered,               | nonsig-         | True           | False | True     | True  | No    |     |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLE_UQ          | 16H           | Not-less-than-or-equal    | (unordered,               | True            | False          | False | True     | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_S           | 17H           | Ordered                   | (signaling)               | True            | True           | True  | False    | Yes   |       |     |         |         |     |
| EQ_US           | 18H           | Equal                     | (unordered,               | signaling)      | False          | False | True     | True  | Yes   |     |         |         |     |
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | on            | QNAN                      |                           |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered1      |                |       |          |       |       |     |         |         |     |
| NGE_UQ          | 19H           | Not-greater-than-or-equal | (unor-                    | False           | True           | False | True     | No    |       |     |         |         |     |
| dered,          | nonsignaling) |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_UQ          | 1AH           | Not-greater-than          | (unordered,               | non-            | False          | True  | True     | True  | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OS        | 1BH           | False                     | (ordered,                 | signaling)      | False          | False | False    | False | Yes   |     |         |         |     |
| NEQ_OS          | 1CH           | Not-equal                 | (ordered,                 | signaling)      | True           | True  | False    | False | Yes   |     |         |         |     |
| GE_OQ           | 1DH           | Greater-than-or-equal     | (ordered,                 | True            | False          | True  | False    | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OQ           | 1EH           | Greater-than              | (ordered,                 | nonsignal-      | True           | False | False    | False | No    |     |         |         |     |
| ing)            |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| TRUE_US         | 1FH           | True                      | (unordered,               | signaling)      | True           | True  | True     | True  | Yes   |     |         |         |     |
* Sml snippets
** Software vector function
#+BEGIN_SRC 
  local
    open Vector
  in
    fun vectorFun (a,b,vecOp,n) = let
      val f = fn x =>vecOp(sub(a,x),sub(b,x))
    in tabulate f n end
  end
#+END_SRC


* gcc warnings from Simd.c <2013-07-29 Mon>
In file included from basis/Simd/Simd.c:4:0:
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real32_loadu_ps’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:11:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(loadu_ps,32)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real64_loadu_pd’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:12:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(loadu_pd,64)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real32_load_ps’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:13:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(load_ps,32)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real64_load_pd’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:14:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(load_pd,64)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real32_loadr_ps’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:15:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(loadr_ps,32)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real64_loadr_pd’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:16:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(loadr_pd,64)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real32_load1_ps’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:17:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(load1_ps,32)
 ^
basis/Simd/Simd-opts.h:8:3: warning: no previous prototype for ‘Simd128_Real64_load1_pd’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode (Real##size##_t* r){   \
   ^
basis/Simd/Simd-opts.h:18:1: note: in expansion of macro ‘SimdLoadReal’
 SimdLoadReal(load1_pd,64)
 ^
basis/Simd/Simd-opts.h:21:8: warning: no previous prototype for ‘Simd128_Real32_store_ps’ [-Wmissing-prototypes]
   void Simd128_Real##size##_##opcode                                    \
        ^
basis/Simd/Simd-opts.h:25:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(store_ps,32)
 ^
basis/Simd/Simd-opts.h: In function ‘Simd128_Real32_store_ps’:
basis/Simd/Simd-opts.h:23:5: warning: ISO C forbids ‘return’ with expression, in function returning void [-Wpedantic]
     return _mm_##opcode (r,s);                                          \
     ^
basis/Simd/Simd-opts.h:25:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(store_ps,32)
 ^
basis/Simd/Simd-opts.h: At top level:
basis/Simd/Simd-opts.h:21:8: warning: no previous prototype for ‘Simd128_Real64_store_pd’ [-Wmissing-prototypes]
   void Simd128_Real##size##_##opcode                                    \
        ^
basis/Simd/Simd-opts.h:26:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(store_pd,64)
 ^
basis/Simd/Simd-opts.h: In function ‘Simd128_Real64_store_pd’:
basis/Simd/Simd-opts.h:23:5: warning: ISO C forbids ‘return’ with expression, in function returning void [-Wpedantic]
     return _mm_##opcode (r,s);                                          \
     ^
basis/Simd/Simd-opts.h:26:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(store_pd,64)
 ^
basis/Simd/Simd-opts.h: At top level:
basis/Simd/Simd-opts.h:21:8: warning: no previous prototype for ‘Simd128_Real32_storeu_ps’ [-Wmissing-prototypes]
   void Simd128_Real##size##_##opcode                                    \
        ^
basis/Simd/Simd-opts.h:27:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storeu_ps,32)
 ^
basis/Simd/Simd-opts.h: In function ‘Simd128_Real32_storeu_ps’:
basis/Simd/Simd-opts.h:23:5: warning: ISO C forbids ‘return’ with expression, in function returning void [-Wpedantic]
     return _mm_##opcode (r,s);                                          \
     ^
basis/Simd/Simd-opts.h:27:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storeu_ps,32)
 ^
basis/Simd/Simd-opts.h: At top level:
basis/Simd/Simd-opts.h:21:8: warning: no previous prototype for ‘Simd128_Real64_storeu_pd’ [-Wmissing-prototypes]
   void Simd128_Real##size##_##opcode                                    \
        ^
basis/Simd/Simd-opts.h:28:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storeu_pd,64)
 ^
basis/Simd/Simd-opts.h: In function ‘Simd128_Real64_storeu_pd’:
basis/Simd/Simd-opts.h:23:5: warning: ISO C forbids ‘return’ with expression, in function returning void [-Wpedantic]
     return _mm_##opcode (r,s);                                          \
     ^
basis/Simd/Simd-opts.h:28:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storeu_pd,64)
 ^
basis/Simd/Simd-opts.h: At top level:
basis/Simd/Simd-opts.h:21:8: warning: no previous prototype for ‘Simd128_Real32_storer_ps’ [-Wmissing-prototypes]
   void Simd128_Real##size##_##opcode                                    \
        ^
basis/Simd/Simd-opts.h:29:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storer_ps,32)
 ^
basis/Simd/Simd-opts.h: In function ‘Simd128_Real32_storer_ps’:
basis/Simd/Simd-opts.h:23:5: warning: ISO C forbids ‘return’ with expression, in function returning void [-Wpedantic]
     return _mm_##opcode (r,s);                                          \
     ^
basis/Simd/Simd-opts.h:29:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storer_ps,32)
 ^
basis/Simd/Simd-opts.h: At top level:
basis/Simd/Simd-opts.h:21:8: warning: no previous prototype for ‘Simd128_Real64_storer_pd’ [-Wmissing-prototypes]
   void Simd128_Real##size##_##opcode                                    \
        ^
basis/Simd/Simd-opts.h:30:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storer_pd,64)
 ^
basis/Simd/Simd-opts.h: In function ‘Simd128_Real64_storer_pd’:
basis/Simd/Simd-opts.h:23:5: warning: ISO C forbids ‘return’ with expression, in function returning void [-Wpedantic]
     return _mm_##opcode (r,s);                                          \
     ^
basis/Simd/Simd-opts.h:30:1: note: in expansion of macro ‘SimdStoreReal’
 SimdStoreReal(storer_pd,64)
 ^
basis/Simd/Simd-opts.h: At top level:
basis/Simd/Simd-opts.h:33:18: warning: no previous prototype for ‘Simd128_Real32_set_ps’ [-Wmissing-prototypes]
 Simd128_Real32_t Simd128_Real32_##opcode                \
                  ^
basis/Simd/Simd-opts.h:37:1: note: in expansion of macro ‘SimdSetFloat4’
 SimdSetFloat4(set_ps)
 ^
basis/Simd/Simd-opts.h:33:18: warning: no previous prototype for ‘Simd128_Real32_setr_ps’ [-Wmissing-prototypes]
 Simd128_Real32_t Simd128_Real32_##opcode                \
                  ^
basis/Simd/Simd-opts.h:38:1: note: in expansion of macro ‘SimdSetFloat4’
 SimdSetFloat4(setr_ps)
 ^
basis/Simd/Simd-opts.h:49:18: warning: no previous prototype for ‘Simd128_Real64_set_pd’ [-Wmissing-prototypes]
 Simd128_Real64_t Simd128_Real64_##opcode                \
                  ^
basis/Simd/Simd-opts.h:53:1: note: in expansion of macro ‘SimdSetDouble2’
 SimdSetDouble2(set_pd)
 ^
basis/Simd/Simd-opts.h:49:18: warning: no previous prototype for ‘Simd128_Real64_setr_pd’ [-Wmissing-prototypes]
 Simd128_Real64_t Simd128_Real64_##opcode                \
                  ^
basis/Simd/Simd-opts.h:54:1: note: in expansion of macro ‘SimdSetDouble2’
 SimdSetDouble2(setr_pd)
 ^
basis/Simd/Simd-opts.h:43:3: warning: no previous prototype for ‘Simd128_Real_set1_ps’ [-Wmissing-prototypes]
   Simd128_Real_set1_##id (Real##size##_t r1) {                  \
   ^
basis/Simd/Simd-opts.h:55:1: note: in expansion of macro ‘SimdSetReal1’
 SimdSetReal1(32,ps)
 ^
basis/Simd/Simd-opts.h:43:3: warning: no previous prototype for ‘Simd128_Real_set1_pd’ [-Wmissing-prototypes]
   Simd128_Real_set1_##id (Real##size##_t r1) {                  \
   ^
basis/Simd/Simd-opts.h:56:1: note: in expansion of macro ‘SimdSetReal1’
 SimdSetReal1(64,pd)
 ^
basis/Simd/Simd-opts.h:77:3: warning: no previous prototype for ‘Simd128_Real32_hadd’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode  /*function name*/                      \
   ^
basis/Simd/Simd-opts.h:84:3: note: in expansion of macro ‘binarySimdReal’
   binarySimdReal(opcode,ps,32)                    \
   ^
basis/Simd/Simd-opts.h:107:1: note: in expansion of macro ‘both’
 both(hadd)
 ^
basis/Simd/Simd-opts.h:77:3: warning: no previous prototype for ‘Simd128_Real64_hadd’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode  /*function name*/                      \
   ^
basis/Simd/Simd-opts.h:85:3: note: in expansion of macro ‘binarySimdReal’
   binarySimdReal(opcode,pd,64)
   ^
basis/Simd/Simd-opts.h:107:1: note: in expansion of macro ‘both’
 both(hadd)
 ^
basis/Simd/Simd-opts.h:77:3: warning: no previous prototype for ‘Simd128_Real32_hsub’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode  /*function name*/                      \
   ^
basis/Simd/Simd-opts.h:84:3: note: in expansion of macro ‘binarySimdReal’
   binarySimdReal(opcode,ps,32)                    \
   ^
basis/Simd/Simd-opts.h:108:1: note: in expansion of macro ‘both’
 both(hsub)
 ^
basis/Simd/Simd-opts.h:77:3: warning: no previous prototype for ‘Simd128_Real64_hsub’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode  /*function name*/                      \
   ^
basis/Simd/Simd-opts.h:85:3: note: in expansion of macro ‘binarySimdReal’
   binarySimdReal(opcode,pd,64)
   ^
basis/Simd/Simd-opts.h:108:1: note: in expansion of macro ‘both’
 both(hsub)
 ^
basis/Simd/Simd-opts.h:77:3: warning: no previous prototype for ‘Simd128_Real32_addsub’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode  /*function name*/                      \
   ^
basis/Simd/Simd-opts.h:84:3: note: in expansion of macro ‘binarySimdReal’
   binarySimdReal(opcode,ps,32)                    \
   ^
basis/Simd/Simd-opts.h:109:1: note: in expansion of macro ‘both’
 both(addsub)
 ^
basis/Simd/Simd-opts.h:77:3: warning: no previous prototype for ‘Simd128_Real64_addsub’ [-Wmissing-prototypes]
   Simd128_Real##size##_##opcode  /*function name*/                      \
   ^
basis/Simd/Simd-opts.h:85:3: note: in expansion of macro ‘binarySimdReal’
   binarySimdReal(opcode,pd,64)
   ^
basis/Simd/Simd-opts.h:109:1: note: in expansion of macro ‘both’
 both(addsub)

